http://www.css88.com/doc/webpack2/
https://doc.webpack-china.org/
webpack2.2中文文档阅读


通过 loader 的转换，任何形式的资源都可以视作模块，
比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。

asset 资源文件

chunk

注意，不推荐全局安装 webpack。
这会锁定 webpack 到指定版本，并且在使用不同的 webpack 版本的项目中可能会导致构建失败。

-----------------------------------------

mkdir webpack-demo && cd webpack-demo

npm install --save-dev webpack

.\node_modules\.bin\webpack --help # 显示有效的 CLI（命令行command-line interface） 命令列表

--------------------------

lodash ： Lodash 是一套工具库，它内部封装了诸多对字符串、数组、对象等常见数据类型的处理函数，其中部分是目前 ECMAScript 尚未制定的规范，但同时被业界所认可的辅助函数

npm install --save lodash


-------------------------

指南>


------------------
代码分离

--分离第三方库：使用 CommonsChunkPlugin 分离 vendor/library 代码。

--分离 CSS：使用 ExtractTextWebpackPlugin 分离 CSS。

--分离第三方库：使用 import() 或者 require.ensure() 实现按需分离。

----------------------------------

代码分离 - CSS

1.分离
	--使用 css-loader 和 style-loader分离
	--使用 ExtractTextWebpackPlugin分离（异步且并行去加载 CSS）

2.其他文件中引入
	--import 'bootstrap/dist/css/bootstrap.css';	

-----------------------------------------------

代码分离 - Libraries（？生疏）

	因为浏览器会根据缓存头来缓存资源文件，如果文件没有被改变，文件将会被缓存从而不用去再次请求 cdn。

	把 vendor 和应用代码的 bundle 分离时，才能实现这一点。


--------------------------------------
为什么要用？？
var webpack = require('webpack');
var path = require('path');
--------------------------------------
ES2015 loader 规范 

----------------------------------------------

代码分离 - 异步

Promoise 对象？？


















